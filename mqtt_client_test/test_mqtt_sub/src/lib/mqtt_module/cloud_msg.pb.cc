// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloud_msg.proto

#include "cloud_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace acuProtoPackage {
class ACUCarInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ACUCarInfo> _instance;
} _ACUCarInfo_default_instance_;
}  // namespace acuProtoPackage
static void InitDefaultsscc_info_ACUCarInfo_cloud_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::acuProtoPackage::_ACUCarInfo_default_instance_;
    new (ptr) ::acuProtoPackage::ACUCarInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acuProtoPackage::ACUCarInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ACUCarInfo_cloud_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ACUCarInfo_cloud_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cloud_5fmsg_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cloud_5fmsg_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cloud_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cloud_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, carname_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, acuswv_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, serveralive_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, timestamp_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, accstatus_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, adapmdus_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, crepb_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, crgear_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, crspeed_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, crsteer_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, crtsk_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, locationlat_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, locationlng_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, heading_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, mileage_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, steermode_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, tgacc_),
  PROTOBUF_FIELD_OFFSET(::acuProtoPackage::ACUCarInfo, fuel_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::acuProtoPackage::ACUCarInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::acuProtoPackage::_ACUCarInfo_default_instance_),
};

const char descriptor_table_protodef_cloud_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017cloud_msg.proto\022\017acuProtoPackage\"\271\003\n\nA"
  "CUCarInfo\022\017\n\007carName\030\001 \001(\t\022\016\n\006ACUSwv\030\002 \001"
  "(\t\022\023\n\013serverAlive\030\003 \001(\r\022\021\n\ttimeStamp\030\004 \001"
  "(\t\022.\n\tACCStatus\030\005 \001(\0162\033.acuProtoPackage."
  "accStatusT\022-\n\010ADAPMdus\030\006 \001(\0162\033.acuProtoP"
  "ackage.adapModusT\022*\n\005crEpb\030\007 \001(\0162\033.acuPr"
  "otoPackage.epbStatusT\022*\n\006crGear\030\010 \001(\0162\032."
  "acuProtoPackage.gearModeT\022\017\n\007crSpeed\030\t \001"
  "(\002\022\017\n\007crSteer\030\n \001(\001\022\r\n\005crTsk\030\013 \001(\r\022\023\n\013lo"
  "cationLat\030\014 \001(\001\022\023\n\013locationLng\030\r \001(\001\022\017\n\007"
  "heading\030\016 \001(\002\022\017\n\007mileage\030\017 \001(\r\022\021\n\tsteerM"
  "ode\030\020 \001(\r\022\r\n\005tgAcc\030\021 \001(\001\022\014\n\004fuel\030\022 \001(\001*\310"
  "\001\n\naccStatusT\022\013\n\007ACC_OFF\020\000\022\014\n\010ACC_INIT\020\001"
  "\022\017\n\013ACC_STANDBY\020\002\022\024\n\020ACC_AKTIV_regelt\020\003\022"
  "\020\n\014ACC_OVERRIDE\020\004\022\030\n\024ACC_Abschaltreaktio"
  "n\020\005\022$\n reversibler_Fehler_im_ACC_system\020"
  "\006\022&\n\"irreversibler_Fehler_im_ACC_system\020"
  "\007* \n\nadapModusT\022\n\n\006Manual\020\000\022\006\n\002AI\020\001*[\n\ne"
  "pbStatusT\022\t\n\005offen\020\000\022\021\n\rBremse_geschl\020\001\022"
  "\024\n\020Aktuator_im_Lauf\020\002\022\031\n\025Fehler_oder_unb"
  "ekannt\020\003*\264\001\n\tgearModeT\022\024\n\020Zwischenstellu"
  "ng\020\000\022\010\n\004Init\020\001\022\016\n\nPosition_P\020\005\022\016\n\nPositi"
  "on_R\020\006\022\016\n\nPosition_N\020\007\022\016\n\nPosition_D\020\010\022\016"
  "\n\nPosition_S\020\t\022\r\n\tEffizienz\020\n\022\r\n\tTipp_in"
  "_S\020\r\022\r\n\tTipp_in_D\020\016\022\n\n\006Fehler\020\017*\226\001\n\014tsk_"
  "status_t\022\025\n\021Hauptschalter_aus\020\000\022\010\n\004init\020"
  "\001\022\n\n\006passiv\020\002\022\t\n\005aktiv\020\003\022\017\n\013uebertreten\020"
  "\004\022\023\n\017brake_only_mode\020\005\022\022\n\016reversibel_aus"
  "\020\006\022\024\n\020irreversibel_aus\020\007*P\n\nsteerModeT\022\007"
  "\n\003OFF\020\000\022\t\n\005ready\020\001\022\031\n\025RPCSfcRackSpmonTbt"
  "Mon\020\002\022\023\n\017RPCSfcRackSpMon\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cloud_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cloud_5fmsg_2eproto_sccs[1] = {
  &scc_info_ACUCarInfo_cloud_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cloud_5fmsg_2eproto_once;
static bool descriptor_table_cloud_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cloud_5fmsg_2eproto = {
  &descriptor_table_cloud_5fmsg_2eproto_initialized, descriptor_table_protodef_cloud_5fmsg_2eproto, "cloud_msg.proto", 1234,
  &descriptor_table_cloud_5fmsg_2eproto_once, descriptor_table_cloud_5fmsg_2eproto_sccs, descriptor_table_cloud_5fmsg_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_cloud_5fmsg_2eproto::offsets,
  file_level_metadata_cloud_5fmsg_2eproto, 1, file_level_enum_descriptors_cloud_5fmsg_2eproto, file_level_service_descriptors_cloud_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cloud_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cloud_5fmsg_2eproto)), true);
namespace acuProtoPackage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* accStatusT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cloud_5fmsg_2eproto);
  return file_level_enum_descriptors_cloud_5fmsg_2eproto[0];
}
bool accStatusT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* adapModusT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cloud_5fmsg_2eproto);
  return file_level_enum_descriptors_cloud_5fmsg_2eproto[1];
}
bool adapModusT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* epbStatusT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cloud_5fmsg_2eproto);
  return file_level_enum_descriptors_cloud_5fmsg_2eproto[2];
}
bool epbStatusT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* gearModeT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cloud_5fmsg_2eproto);
  return file_level_enum_descriptors_cloud_5fmsg_2eproto[3];
}
bool gearModeT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* tsk_status_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cloud_5fmsg_2eproto);
  return file_level_enum_descriptors_cloud_5fmsg_2eproto[4];
}
bool tsk_status_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* steerModeT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cloud_5fmsg_2eproto);
  return file_level_enum_descriptors_cloud_5fmsg_2eproto[5];
}
bool steerModeT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ACUCarInfo::InitAsDefaultInstance() {
}
class ACUCarInfo::_Internal {
 public:
};

ACUCarInfo::ACUCarInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:acuProtoPackage.ACUCarInfo)
}
ACUCarInfo::ACUCarInfo(const ACUCarInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  carname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_carname().empty()) {
    carname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.carname_);
  }
  acuswv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_acuswv().empty()) {
    acuswv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.acuswv_);
  }
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  ::memcpy(&serveralive_, &from.serveralive_,
    static_cast<size_t>(reinterpret_cast<char*>(&fuel_) -
    reinterpret_cast<char*>(&serveralive_)) + sizeof(fuel_));
  // @@protoc_insertion_point(copy_constructor:acuProtoPackage.ACUCarInfo)
}

void ACUCarInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ACUCarInfo_cloud_5fmsg_2eproto.base);
  carname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acuswv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serveralive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuel_) -
      reinterpret_cast<char*>(&serveralive_)) + sizeof(fuel_));
}

ACUCarInfo::~ACUCarInfo() {
  // @@protoc_insertion_point(destructor:acuProtoPackage.ACUCarInfo)
  SharedDtor();
}

void ACUCarInfo::SharedDtor() {
  carname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acuswv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ACUCarInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ACUCarInfo& ACUCarInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ACUCarInfo_cloud_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ACUCarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:acuProtoPackage.ACUCarInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  carname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acuswv_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serveralive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuel_) -
      reinterpret_cast<char*>(&serveralive_)) + sizeof(fuel_));
  _internal_metadata_.Clear();
}

const char* ACUCarInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string carName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_carname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "acuProtoPackage.ACUCarInfo.carName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ACUSwv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_acuswv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "acuProtoPackage.ACUCarInfo.ACUSwv"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serverAlive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serveralive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timeStamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "acuProtoPackage.ACUCarInfo.timeStamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .acuProtoPackage.accStatusT ACCStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_accstatus(static_cast<::acuProtoPackage::accStatusT>(val));
        } else goto handle_unusual;
        continue;
      // .acuProtoPackage.adapModusT ADAPMdus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_adapmdus(static_cast<::acuProtoPackage::adapModusT>(val));
        } else goto handle_unusual;
        continue;
      // .acuProtoPackage.epbStatusT crEpb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_crepb(static_cast<::acuProtoPackage::epbStatusT>(val));
        } else goto handle_unusual;
        continue;
      // .acuProtoPackage.gearModeT crGear = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_crgear(static_cast<::acuProtoPackage::gearModeT>(val));
        } else goto handle_unusual;
        continue;
      // float crSpeed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          crspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double crSteer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          crsteer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 crTsk = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          crtsk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double locationLat = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          locationlat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double locationLng = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          locationlng_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float heading = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 mileage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          mileage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 steerMode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          steermode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double tgAcc = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          tgacc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fuel = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          fuel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ACUCarInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:acuProtoPackage.ACUCarInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string carName = 1;
  if (this->carname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_carname().data(), static_cast<int>(this->_internal_carname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "acuProtoPackage.ACUCarInfo.carName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_carname(), target);
  }

  // string ACUSwv = 2;
  if (this->acuswv().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_acuswv().data(), static_cast<int>(this->_internal_acuswv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "acuProtoPackage.ACUCarInfo.ACUSwv");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_acuswv(), target);
  }

  // uint32 serverAlive = 3;
  if (this->serveralive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serveralive(), target);
  }

  // string timeStamp = 4;
  if (this->timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "acuProtoPackage.ACUCarInfo.timeStamp");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timestamp(), target);
  }

  // .acuProtoPackage.accStatusT ACCStatus = 5;
  if (this->accstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_accstatus(), target);
  }

  // .acuProtoPackage.adapModusT ADAPMdus = 6;
  if (this->adapmdus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_adapmdus(), target);
  }

  // .acuProtoPackage.epbStatusT crEpb = 7;
  if (this->crepb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_crepb(), target);
  }

  // .acuProtoPackage.gearModeT crGear = 8;
  if (this->crgear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_crgear(), target);
  }

  // float crSpeed = 9;
  if (!(this->crspeed() <= 0 && this->crspeed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_crspeed(), target);
  }

  // double crSteer = 10;
  if (!(this->crsteer() <= 0 && this->crsteer() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_crsteer(), target);
  }

  // uint32 crTsk = 11;
  if (this->crtsk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_crtsk(), target);
  }

  // double locationLat = 12;
  if (!(this->locationlat() <= 0 && this->locationlat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_locationlat(), target);
  }

  // double locationLng = 13;
  if (!(this->locationlng() <= 0 && this->locationlng() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_locationlng(), target);
  }

  // float heading = 14;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_heading(), target);
  }

  // uint32 mileage = 15;
  if (this->mileage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_mileage(), target);
  }

  // uint32 steerMode = 16;
  if (this->steermode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_steermode(), target);
  }

  // double tgAcc = 17;
  if (!(this->tgacc() <= 0 && this->tgacc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_tgacc(), target);
  }

  // double fuel = 18;
  if (!(this->fuel() <= 0 && this->fuel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_fuel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acuProtoPackage.ACUCarInfo)
  return target;
}

size_t ACUCarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acuProtoPackage.ACUCarInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string carName = 1;
  if (this->carname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_carname());
  }

  // string ACUSwv = 2;
  if (this->acuswv().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acuswv());
  }

  // string timeStamp = 4;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // uint32 serverAlive = 3;
  if (this->serveralive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serveralive());
  }

  // .acuProtoPackage.accStatusT ACCStatus = 5;
  if (this->accstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_accstatus());
  }

  // .acuProtoPackage.adapModusT ADAPMdus = 6;
  if (this->adapmdus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_adapmdus());
  }

  // .acuProtoPackage.epbStatusT crEpb = 7;
  if (this->crepb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_crepb());
  }

  // .acuProtoPackage.gearModeT crGear = 8;
  if (this->crgear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_crgear());
  }

  // float crSpeed = 9;
  if (!(this->crspeed() <= 0 && this->crspeed() >= 0)) {
    total_size += 1 + 4;
  }

  // double crSteer = 10;
  if (!(this->crsteer() <= 0 && this->crsteer() >= 0)) {
    total_size += 1 + 8;
  }

  // double locationLat = 12;
  if (!(this->locationlat() <= 0 && this->locationlat() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 crTsk = 11;
  if (this->crtsk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crtsk());
  }

  // float heading = 14;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // double locationLng = 13;
  if (!(this->locationlng() <= 0 && this->locationlng() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 mileage = 15;
  if (this->mileage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mileage());
  }

  // uint32 steerMode = 16;
  if (this->steermode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_steermode());
  }

  // double tgAcc = 17;
  if (!(this->tgacc() <= 0 && this->tgacc() >= 0)) {
    total_size += 2 + 8;
  }

  // double fuel = 18;
  if (!(this->fuel() <= 0 && this->fuel() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACUCarInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acuProtoPackage.ACUCarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ACUCarInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ACUCarInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acuProtoPackage.ACUCarInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acuProtoPackage.ACUCarInfo)
    MergeFrom(*source);
  }
}

void ACUCarInfo::MergeFrom(const ACUCarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acuProtoPackage.ACUCarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.carname().size() > 0) {

    carname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.carname_);
  }
  if (from.acuswv().size() > 0) {

    acuswv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.acuswv_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.serveralive() != 0) {
    _internal_set_serveralive(from._internal_serveralive());
  }
  if (from.accstatus() != 0) {
    _internal_set_accstatus(from._internal_accstatus());
  }
  if (from.adapmdus() != 0) {
    _internal_set_adapmdus(from._internal_adapmdus());
  }
  if (from.crepb() != 0) {
    _internal_set_crepb(from._internal_crepb());
  }
  if (from.crgear() != 0) {
    _internal_set_crgear(from._internal_crgear());
  }
  if (!(from.crspeed() <= 0 && from.crspeed() >= 0)) {
    _internal_set_crspeed(from._internal_crspeed());
  }
  if (!(from.crsteer() <= 0 && from.crsteer() >= 0)) {
    _internal_set_crsteer(from._internal_crsteer());
  }
  if (!(from.locationlat() <= 0 && from.locationlat() >= 0)) {
    _internal_set_locationlat(from._internal_locationlat());
  }
  if (from.crtsk() != 0) {
    _internal_set_crtsk(from._internal_crtsk());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.locationlng() <= 0 && from.locationlng() >= 0)) {
    _internal_set_locationlng(from._internal_locationlng());
  }
  if (from.mileage() != 0) {
    _internal_set_mileage(from._internal_mileage());
  }
  if (from.steermode() != 0) {
    _internal_set_steermode(from._internal_steermode());
  }
  if (!(from.tgacc() <= 0 && from.tgacc() >= 0)) {
    _internal_set_tgacc(from._internal_tgacc());
  }
  if (!(from.fuel() <= 0 && from.fuel() >= 0)) {
    _internal_set_fuel(from._internal_fuel());
  }
}

void ACUCarInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acuProtoPackage.ACUCarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACUCarInfo::CopyFrom(const ACUCarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acuProtoPackage.ACUCarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACUCarInfo::IsInitialized() const {
  return true;
}

void ACUCarInfo::InternalSwap(ACUCarInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  carname_.Swap(&other->carname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  acuswv_.Swap(&other->acuswv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serveralive_, other->serveralive_);
  swap(accstatus_, other->accstatus_);
  swap(adapmdus_, other->adapmdus_);
  swap(crepb_, other->crepb_);
  swap(crgear_, other->crgear_);
  swap(crspeed_, other->crspeed_);
  swap(crsteer_, other->crsteer_);
  swap(locationlat_, other->locationlat_);
  swap(crtsk_, other->crtsk_);
  swap(heading_, other->heading_);
  swap(locationlng_, other->locationlng_);
  swap(mileage_, other->mileage_);
  swap(steermode_, other->steermode_);
  swap(tgacc_, other->tgacc_);
  swap(fuel_, other->fuel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ACUCarInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace acuProtoPackage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::acuProtoPackage::ACUCarInfo* Arena::CreateMaybeMessage< ::acuProtoPackage::ACUCarInfo >(Arena* arena) {
  return Arena::CreateInternal< ::acuProtoPackage::ACUCarInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
